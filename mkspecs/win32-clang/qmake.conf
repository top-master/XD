
#
# Debug Notes:
# maybe replace -g1 with -fdebug-info-for-profiling
#

include(../win32-g++/qmake.conf)
#include(../common/gcc-base.conf)
#include(../common/clang.conf)

QMAKE_CFLAGS -= -fno-keep-inline-dllexport
QMAKE_CXXFLAGS -= -fno-keep-inline-dllexport

# Clang supports UNIX generator as well, but
# then Windows's command-line length limit may be reached, else could do:
# ```
# MAKEFILE_GENERATOR = UNIX
# ```

QMAKE_COMPILER = gcc clang llvm
QMAKE_RANLIB = $${CROSS_COMPILE}ranlib

CONFIG *= win32
CONFIG += llvm_linker
equals(MAKEFILE_GENERATOR, MINGW) {
    CONFIG -= precompile_header
} else {
    CONFIG += unversioned_libname
}

QMAKE_AR = llvm-ar cqs
QMAKE_NM = llvm-nm -P
QMAKE_RANLIB =

QMAKE_CFLAGS *= \
    -Wno-deprecated-non-prototype \
    # List terminator comment.

# C++14 is `-std=c++1y`, C++17 is `-std=c++1z`, C++20 is `-std=c++2a`.
QMAKE_CXXFLAGS *= \
    -std=c++1y \
    -Wno-deprecated-register \
    -Wno-ignored-attributes \
    # List terminator comment.

QMAKE_CXXFLAGS *= -fms-extensions -fpermissive

win32 {
    DEFINES *= _WIN32 WIN32
    tmp = -pthread
    QMAKE_CFLAGS -= $$tmp
    QMAKE_CXXFLAGS -= $$tmp
    QMAKE_CXXFLAGS_EXCEPTIONS_ON -= -mthreads
    QMAKE_LFLAGS_EXCEPTIONS_ON -= -mthreads
}
